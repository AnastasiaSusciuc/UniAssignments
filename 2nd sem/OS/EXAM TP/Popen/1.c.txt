#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char** argv)
{
        int i;

        if (argc <= 1)
        {
                perror("Enter arguments!");
                exit(0);
        }

        for (i = 1; i < argc; i++)
        {
                int c2p[2];

                if (pipe(c2p) < 0)
                {
                        perror("failed to run pipe");
                        exit(1);
                }
                int pid = fork();
                if (pid < 0)
                {
                        perror("failed to run fork");
                        exit(1);
                }

                if (pid == 0) // child process
                {
                        close(c2p[0]);
                        FILE* fp;

                        // in command I build the shell command to be run by popen, namely something like -> echo "something" |sed -E \"s/[aeiou]//gi\"
                        // where "something" is replaced by argv[i]

                        int cnt = 0;
                        char command[30+strlen(argv[i])];
                        char echo[] = "echo \"";
                        int j;
                        for (j = 0; j < 6; j++)
                                command[cnt++] = echo[j];

                        for (j = 0; j < strlen(argv[i]); j++)
                                command[cnt++] = argv[i][j];

                        char sed[] = "\" |sed -E \"s/[aeiou]//gi\"";
                        for (j = 0; j < 25; j++)
                                command[cnt++] = sed[j];

                        command[cnt++] = '\0'; // do not forget strings are NULL terminated

                        fp = popen(command, "r"); // running the popen in r mode because we want to read from its result that will be place in a the file with file descriptor fp
                        if (fp == NULL)
                        {
                                perror("failed to run popen");
                                exit(1);
                        }

                        char no_vowel[1000];

                        fgets(no_vowel, sizeof(no_vowel), fp); // reading the result of the shell command
                        pclose(fp);
                        int len = strlen(no_vowel)-1;

                        write(c2p[1], &len, sizeof(int));         // sending via pipe the result of the command

                        write(c2p[1], &no_vowel, len*(sizeof(int)));
                        close(c2p[1]);

                        exit(0);
                }
                close(c2p[1]);

                int len = 0;
                read(c2p[0], &len, sizeof(int));
                char no_vowel[1000];
                read(c2p[0], &no_vowel, len*(sizeof(int))); // reading the string whose vowels were removed

                close(c2p[0]);

                wait(0);

                int pipe2[2];

                if (pipe(pipe2) < 0)  // we need another shell command to compute the length of our string after eliminating its vowels
                {
                        perror("failed pipe creation!");
                        exit(1);
                }

                pid = fork();
                if (pid < 0)
                {
                        perror("failed fork");
                        exit(1);
                }
                else if (pid == 0) // another process
                {
                        close(pipe2[0]);

                        FILE* fd;

                        // same idea-> we use the command echo "our string without vowels"| wc -m
                        // wc -m counts the number of characters including \0

                        int cnt = 0;
                        char command[100];
                        char echo[] = "echo \"";
                        int j;
                        for (j = 0; j < 6; j++)
                                command[cnt++] = echo[j];

                        for (j = 0; j < strlen(no_vowel)-1; j++) // we subtract 1 beause no_vowel has a /n at its end
                                command[cnt++] = argv[i][j];

                        char wc[] = "\" |wc -m";
                        for (j = 0; j < 9; j++)
                                command[cnt++] = wc[j];

                        command[cnt++] = '\0';

                        fd = popen(command, "r");
                        if (fd == NULL)
                        {
                                perror("failed to run popen");
                                exit(1);
                        }
                        char length[1000];

                        fgets(length, sizeof(length), fd);
                        pclose(fd);

                        int len = atoi(length);

                        write(pipe2[1], &len, sizeof(int)); // sending via pipe the result of the command

                        close(pipe2[1]);
                        // printf("BINE GAGIGO! : %s", no_vowel);
                        exit(0);
                }

                close(pipe2[1]);

                len = 0;
                read(pipe2[0], &len, sizeof(int));
                close(pipe2[0]);

                wait(0);

                printf("The length of the string without vowels is %d\n", len-1); // we subtract 1 because wc -m also counts the \0

        }
        return 0;
}