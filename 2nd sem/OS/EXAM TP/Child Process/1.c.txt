#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char** argv)
{
        int no_processes = 0;
        while(1)
        {
                no_processes++;

                int p2a[2], a2b[2], a2p[2];
                if (pipe(p2a) < 0)
                {
                        perror("Error pipe!");
                        exit(1);
                }

                if (pipe(a2b) < 0)
                {
                        perror("Error pipe!");
                        exit(1);
                }

                if (pipe(a2p) < 0)
                {
                        perror("Error pipe!");
                        exit(1);
                }


                int pid1 = fork();

                if (pid1 < 0)
                {
                        perror("Error fork1");
                        exit(1);
                }
                else if (pid1 == 0) // child A
                {
                        close(a2p[0]);
                        close(a2b[0]);
                        close(p2a[1]);

                        int len;
                        read(p2a[0], &len, sizeof(int));
                        char s[1000];
                        read(p2a[0], s, (len+1)*sizeof(char));

                        int freq[26];
                        for (int i = 0; i < 26; i++)
                                freq[i] = 0;

                        if (strcmp(s, "X") != 0)
                        {
                                for (int i = 0; i < len; i++)
                                        freq[s[i]-'a']++;
                        }

                        write(a2p[1], freq, 26*sizeof(int));
                        write(a2b[1], freq, 26*sizeof(int));

                        close(a2p[1]);
                        close(a2b[1]);
                        close(p2a[0]);
                        exit(0);
                }
                else if (pid1 > 0)
                {
                        int pid2 = fork();

                        if (pid2 < 0)
                        {
                                perror("Error fork!");
                                exit(1);
                        }
                        else if (pid2 == 0) // child B
                        {
                                close(p2a[0]); close(p2a[1]);
                                close(a2p[0]); close(a2p[1]);
                                close(a2b[1]);
                                int freq[26];
                                read(a2b[0], freq, sizeof(int)*26);

                                int sum = 0;
                                for (int i = 0; i < 26; i++)
                                        sum += freq[i];

                                printf("B: sum is %d\n", sum);

                                close(a2b[0]);
                                exit(0);
                        }
                        else  // parent
                        {
                                close(p2a[0]);
                                close(a2b[0]); close(a2b[1]);
                                close(a2p[1]);

                                char s[1000];
                                scanf("%s", s);

                                int len = strlen(s);


                                write(p2a[1], &len, sizeof(int));
                                write(p2a[1], s, (len+1)*sizeof(char));

                                if (strcmp(s, "X") == 0)
                                {
                                        break;
                                }

                                int freq[26];
                                read(a2p[0], freq, 26*sizeof(int));
                                printf("P: freq is:\n");
                                for (int i = 0; i < 26; i++)
                                {
                                        printf("%d ", freq[i]);
                                }
                                printf("\n");

                                close(a2p[0]);
                        }
                }

        }

        for (int i = 0; i < no_processes; i++)
        {
                wait(0);
                wait(0);
        }


        return 0;
}