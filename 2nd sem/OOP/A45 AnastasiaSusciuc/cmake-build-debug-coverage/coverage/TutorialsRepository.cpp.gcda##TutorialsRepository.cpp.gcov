        -:    0:Source:C:/Users/susci/Desktop/2nd sem/GA/untitled/Repository/TutorialsRepository.cpp
        -:    0:Graph:C:\Users\susci\Desktop\2nd sem\GA\untitled\cmake-build-debug-coverage\CMakeFiles\untitled.dir\Repository\TutorialsRepository.cpp.gcno
        -:    0:Data:C:\Users\susci\Desktop\2nd sem\GA\untitled\cmake-build-debug-coverage\CMakeFiles\untitled.dir\Repository\TutorialsRepository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by susci on 3/21/2021.
        -:    3://
        -:    4:
        -:    5:#include <stdexcept>
        -:    6:#include "TutorialsRepository.h"
        -:    7:
        -:    8:
        -:    9:Repository::Repository() = default;
        -:   10:
        -:   11:
        -:   12:
        7:   13:int Repository::size_tutorials_list() const
        -:   14:/*
        -:   15: * description: -
        -:   16: *
        -:   17: * returns:     the number of tutorials in the repository
        -:   18: * */
        -:   19:{
        7:   20:    return tutorials_list.size();
        7:   20-block  0
        -:   21:}
        -:   22:
        -:   23:
       31:   24:int Repository::admin_add_tutorial_in_repository(const Tutorial& tutorial)
        -:   25:/*
        -:   26: * description:  adds a new tutorial in the repository of tutorials 'tutorials_list'
        -:   27: *               it is checked if the new tutorial to be added has a unique link, if so then it is added
        -:   28: *
        -:   29: * param1:       tutorial -Tutorial- the tutorial to be added in the repository
        -:   30: *
        -:   31: * returns:      0 - the tutorial was added successfully
        -:   32: *               1 - the tutorial doesn't have a unique link, therefore it was not added in the repository
        -:   33: * */
        -:   34:{
       84:   35:    for (int i = 0; i < tutorials_list.size(); i++)
       31:   35-block  0
       84:   35-block  1
       53:   35-block  2
        -:   36:    {
       55:   37:        Tutorial tutorial_i = tutorials_list[i];
       55:   37-block  0
       55:   37-block  1
    $$$$$:   37-block  2
       55:   38:        if (tutorial_i.get_link() == tutorial.get_link())
       55:   38-block  0
       55:   38-block  1
       55:   38-block  2
        2:   39:            return 1;
        2:   39-block  0
        -:   40:    }
       29:   41:    tutorials_list.append(tutorial);
       29:   41-block  0
       29:   41-block  1
    $$$$$:   41-block  2
       29:   42:    return 0;
        -:   43:}
        -:   44:
        4:   45:int Repository::admin_remove_tutorial_in_repository(const std::string &tutorial_link)
        -:   46:/*
        -:   47: * description:  removes the tutorial with the link 'tutorial_link' from the repository 'tutorials_list'
        -:   48: *               if there is no tutorial having 'tutorial_link' as a link, no changes are made
        -:   49: *
        -:   50: * param1:       tutorial_link -string- a string that represents the link of the tutorial to be erased
        -:   51: *
        -:   52: * returns:      0 - the tutorial was successfully erased from 'tutorial_list'
        -:   53: *               1 - there is no tutorial with this link, no changes were made
        -:   54: *
        -:   55: * */
        -:   56:{
        6:   57:    for (int i = 0; i < tutorials_list.size(); i++)
        4:   57-block  0
        6:   57-block  1
        2:   57-block  2
        -:   58:    {
        4:   59:        Tutorial tutorial_i = tutorials_list[i];
        4:   59-block  0
        4:   59-block  1
    $$$$$:   59-block  2
        4:   60:        if (tutorial_i.get_link() == tutorial_link)
        4:   60-block  0
        4:   60-block  1
        -:   61:        {
        2:   62:            tutorials_list.remove(tutorial_i);
        2:   62-block  0
        2:   63:            return 0;
        2:   63-block  0
        -:   64:        }
        -:   65:    }
        2:   66:    return 1;
        2:   66-block  0
        -:   67:}
        -:   68:
        3:   69:int Repository::admin_update_tutorial_in_repository(const std::string &tutorial_to_update_link,
        -:   70:                                                    const std::string &new_tutorial_title,
        -:   71:                                                    const std::string &new_tutorial_presenter,
        -:   72:                                                    const std::pair<int, int> &new_duration, int new_number_of_likes)
        -:   73:/*
        -:   74: * description:  updates the tutorial with the link 'tutorial_to_update_link' from the repository 'tutorials_list'
        -:   75: *               its title is replaced with 'new_tutorial_title', its presenter with 'new_tutorial_presenter',
        -:   76: *               its duration with 'new_duration', its number of likes with 'new_number_of_likes'
        -:   77: *
        -:   78: * param1:       tutorial_to_update_link -string- the link of the tutorial we want to update; it is unique for every tutorial
        -:   79: * param2:       new_tutorial_title -string- the title to update the tutorial with
        -:   80: * param3:       new_tutorial_presenter -string- the presenter to update the tutorial with
        -:   81: * param4:       new_duration -pair<int, int>- the new duration to update the tutorial with
        -:   82: * param5:       new_number_of_likes -int- the new number of likes to update the tutorial with
        -:   83: *
        -:   84: * returns:      0 - the tutorial was updated successfully
        -:   85: *               1 - there were no tutorials with the link 'tutorial_to_update_link' to be updated -> no changes were made
        -:   86: * */
        -:   87:{
        5:   88:    for (int i = 0; i < tutorials_list.size(); i++)
        3:   88-block  0
        5:   88-block  1
        2:   88-block  2
        -:   89:    {
        -:   90:        // Tutorial tutorial_i = tutorials_list[i];
        4:   91:        if (tutorials_list[i].get_link() == tutorial_to_update_link)
        4:   91-block  0
        -:   92:        {
        2:   93:            tutorials_list[i].set_title(new_tutorial_title);
        2:   93-block  0
        2:   94:            tutorials_list[i].set_presenter(new_tutorial_presenter);
        2:   95:            tutorials_list[i].set_duration(new_duration);
        2:   96:            tutorials_list[i].set_likes(new_number_of_likes);
        2:   97:            return 0;
        -:   98:        }
        -:   99:    }
        1:  100:    return 1;
        1:  100-block  0
        -:  101:
        -:  102:}
        -:  103:
        5:  104:Tutorial Repository::get_tutorial_by_position(int position)
        -:  105:/*
        -:  106: * description:  getter for a tutorial from a certain position
        -:  107: *
        -:  108: * param1:       position -int- the position we want to get the tutorial from
        -:  109: *
        -:  110: * returns:      the tutorial from the position 'position'
        -:  111: * throws:       runtime_error - the position is not from the range(0..number of tutorials in the repo)
        -:  112: *
        -:  113: * */
        -:  114:{
        5:  115:    if (position < 0 || position >= tutorials_list.size())
        5:  115-block  0
        5:  115-block  1
        1:  115-block  2
        4:  115-block  3
        5:  115-block  4
        1:  116:        throw std::runtime_error("Invalid position");
        1:  116-block  0
        1:  116-block  1
    $$$$$:  116-block  2
        4:  117:    return tutorials_list[position];
        4:  117-block  0
        -:  118:}
        -:  119:
        6:  120:std::vector<Tutorial> Repository::all_tutorials_from_repository(){
        6:  121:    std::vector <Tutorial> all_tutorials;
        6:  121-block  0
        -:  122:
        6:  123:    all_tutorials.reserve(tutorials_list.size());
       18:  124:    for (int i = 0; i < tutorials_list.size(); i++) {
        6:  124-block  0
       18:  124-block  1
       12:  124-block  2
       12:  125:        all_tutorials.push_back(tutorials_list[i]);
       12:  125-block  0
       12:  125-block  1
        -:  126:    }
        -:  127:
        6:  128:    return all_tutorials;
        6:  128-block  0
        6:  128-block  1
        -:  129:}
        -:  130:
        -:  131:Repository::~Repository()= default;
        -:  132:
        3:  133:int Repository::admin_increase_likes_in_repository(const std::string &tutorial_link) {
        5:  134:    for (int i = 0; i < tutorials_list.size(); i++)
        3:  134-block  0
        5:  134-block  1
        2:  134-block  2
        -:  135:    {
        4:  136:        Tutorial tutorial_i = tutorials_list[i];
        4:  136-block  0
        4:  136-block  1
    $$$$$:  136-block  2
        4:  137:        if (tutorial_i.get_link() == tutorial_link)
        4:  137-block  0
        4:  137-block  1
        -:  138:        {
        2:  139:            tutorials_list[i].set_likes(tutorials_list[i].get_number_of_likes()+1);
        2:  139-block  0
        2:  139-block  1
        2:  139-block  2
        2:  139-block  3
        2:  140:            return 0;
        2:  140-block  0
        -:  141:        }
        -:  142:    }
        1:  143:    return 1;
        1:  143-block  0
        -:  144:}
